var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/// <reference path="../typings/tstl.d.ts" />
eval('var std = require("./tstl")');
var test;
(function (test) {
    function main() {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, key;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, std.sleep_for(0)];
                    case 1:
                        _c.sent();
                        console.log("TEST ALL");
                        _a = [];
                        for (_b in test)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        key = _a[_i];
                        if (key.indexOf("test_") != 0)
                            return [3 /*break*/, 4];
                        console.log(key);
                        return [4 /*yield*/, test[key]()];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    test.main = main;
})(test || (test = {}));
test.main().then(function () {
    console.log("No error has detected.");
}).catch(function (error) {
    console.log(error);
    throw error;
});
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_atomic_sorting() {
        var array = new std.Vector();
        for (var i = 1; i <= 15; i++)
            for (var j = 0; j < 3; j++)
                array.push_back(i);
        std.shuffle(array.begin(), array.end());
        std.stable_sort(array.begin(), array.end());
        if (std.is_sorted(array.begin(), array.end()) == false)
            throw new std.DomainError("Wrong sorting.");
    }
    test.test_atomic_sorting = test_atomic_sorting;
    function test_object_sorting() {
        //----
        // CONSTRUCT ITEMS
        //----
        var cubes = new std.Deque();
        for (var i = 0; i < 20; i++)
            cubes.push_back(new test.Cube());
        //----
        // SORT BY Cube.less()
        //----
        // DO SORT
        std.sort(cubes.begin(), cubes.end());
        // VALIDATION
        if (std.is_sorted(cubes.begin(), cubes.end()) == false)
            throw new std.DomainError("Wrong sorting.");
        //----
        // SORT BY inline function
        //----
        // DECLARE INLINE FUNCTION
        var inline_function = function (left, right) {
            if (left.x != right.x)
                return left.x < right.x;
            else if (left.y != right.y)
                return left.y < right.y;
            else
                return left.z < right.z;
        };
        // DO SORT
        std.sort(cubes.begin(), cubes.end(), inline_function);
        // VALIDATION
        if (std.is_sorted(cubes.begin(), cubes.end(), inline_function) == false)
            throw new std.DomainError("Wrong sorting.");
    }
    test.test_object_sorting = test_object_sorting;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_adaptors() {
        // CONSTRUCT ADAPTOR CONATINERS
        var queue = _Construct_adaptor(new std.Queue());
        var stack = _Construct_adaptor(new std.Stack());
        // VALIDATE QUEUE
        var queue_items = [];
        while (queue.empty() == false) {
            queue_items.push(queue.front());
            queue.pop();
        }
        _Validate_adaptor_items(queue_items, [0, 1, 2, 3, 4]);
        // VALIDATE STACK
        var stack_items = [];
        while (stack.empty() == false) {
            stack_items.push(stack.top());
            stack.pop();
        }
        _Validate_adaptor_items(stack_items, queue_items.reverse());
    }
    test.test_adaptors = test_adaptors;
    function _Construct_adaptor(adaptor) {
        for (var i = 0; i < 5; ++i)
            adaptor.push(i);
        return adaptor;
    }
    function _Validate_adaptor_items(items, answer) {
        if (items.length != answer.length)
            throw new std.DomainError("Number of elements are wrong.");
        for (var i = 0; i < items.length; ++i)
            if (items[i] != answer[i])
                throw new std.DomainError("Wrong element is inserted in.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_associatives() {
        // SET-CONTAINERS
        _Test_unique_set(new std.HashSet());
        _Test_unique_set(new std.TreeSet());
        _Test_multi_set(new std.HashMultiSet());
        _Test_multi_set(new std.TreeMultiSet());
        // MAP-CONTAINERS
        _Test_unique_map(new std.HashMap());
        _Test_unique_map(new std.TreeMap());
        _Test_multi_map(new std.HashMultiMap());
        _Test_multi_map(new std.TreeMultiMap());
    }
    test.test_associatives = test_associatives;
    /* ---------------------------------------------------------
        SET CONTAINERS
    --------------------------------------------------------- */
    function _Test_unique_set(set) {
        // CONSTRUCT ELEMENTS
        _Construct_set(set);
        // DUPLICATED ?
        if (set.size() != 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var set_1 = __values(set), set_1_1 = set_1.next(); !set_1_1.done; set_1_1 = set_1.next()) {
                var elem = set_1_1.value;
                // TO VALIDATE
                sum += elem.value;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() FUNCTION.
                var it = set.find(elem);
                if (it.equals(set.end()) == true || it.value.equals(elem) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (set_1_1 && !set_1_1.done && (_a = set_1.return)) _a.call(set_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_1, _a;
    }
    function _Test_multi_set(set) {
        // CONSTRUCT ELEMENTS
        _Construct_set(set);
        // DUPLICATED ?
        if (set.size() != 3 * 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var set_2 = __values(set), set_2_1 = set_2.next(); !set_2_1.done; set_2_1 = set_2.next()) {
                var elem = set_2_1.value;
                // TO VALIDATE
                sum += elem.value;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() & COUNT() FUNCTION.
                var it = set.find(elem);
                var count = set.count(elem);
                if (it.equals(set.end()) == true || it.value.equals(elem) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
                else if (count != 3)
                    throw new std.LengthError("Wrong number of duplicated items.");
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (set_2_1 && !set_2_1.done && (_a = set_2.return)) _a.call(set_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // RE-VALIDATE DUPLICATION & RIGHT INSERTION
        if (sum != 3 * 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_2, _a;
    }
    function _Construct_set(set) {
        // INSERT ELEMENTS
        for (var i = 0; i <= 10; ++i)
            for (var j = 0; j < 3; ++j)
                set.push(new test.Atomic(i));
        // TEST SEQUENCE
        var vec = new std.Vector(set.begin(), set.end());
        if (std.is_sorted(vec.begin(), vec.end()) == false)
            throw new std.LogicError("Elements are not correctly inserted.");
    }
    /* ---------------------------------------------------------
        MAP CONTAINERS
    --------------------------------------------------------- */
    function _Test_unique_map(map) {
        // CONSTRUCT ELEMENTS
        _Construct_map(map);
        // DUPLICATED ?
        if (map.size() != 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var map_1 = __values(map), map_1_1 = map_1.next(); !map_1_1.done; map_1_1 = map_1.next()) {
                var pair = map_1_1.value;
                // TO VALIDATE
                sum += pair.second;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() FUNCTION.
                var it = map.find(pair.first);
                if (it.equals(map.end()) == true || it.first.equals(pair.first) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (map_1_1 && !map_1_1.done && (_a = map_1.return)) _a.call(map_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_3, _a;
    }
    function _Test_multi_map(map) {
        // CONSTRUCT ELEMENTS
        _Construct_map(map);
        // DUPLICATED ?
        if (map.size() != 3 * 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var map_2 = __values(map), map_2_1 = map_2.next(); !map_2_1.done; map_2_1 = map_2.next()) {
                var pair = map_2_1.value;
                // TO VALIDATE
                sum += pair.second;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() & COUNT() FUNCTION.
                var it = map.find(pair.first);
                var count = map.count(pair.first);
                if (it.equals(map.end()) == true || it.first.equals(pair.first) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
                else if (count != 3)
                    throw new std.LengthError("Wrong number of duplicated items.");
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (map_2_1 && !map_2_1.done && (_a = map_2.return)) _a.call(map_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 3 * 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_4, _a;
    }
    function _Construct_map(map) {
        for (var i = 0; i <= 10; ++i)
            for (var j = 0; j < 3; ++j) {
                var key = new test.Atomic(NUMBER_NAMES[i]);
                var value = i;
                map.push(std.make_pair(key, value));
            }
    }
    var NUMBER_NAMES = [
        "Zero",
        "First", "Second", "Third", "Fourth",
        "Fifth", "Sixth", "Seventh", "Eighth", "Nineth", "Tenth"
    ];
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_for_of_iterations() {
        // LINEAR CONTAINERS
        _Test_for_of_iteration(new std.Vector());
        _Test_for_of_iteration(new std.Deque());
        _Test_for_of_iteration(new std.List());
        // ASSOCIATIVE CONTAINERS
        _Test_for_of_iteration(new std.TreeSet());
        _Test_for_of_map_iteration();
    }
    test.test_for_of_iterations = test_for_of_iterations;
    function _Test_for_of_iteration(vec) {
        //----
        // CONSTRUCTIONS
        //----
        // CONSTRUCT ITEMS TO VALIDATE
        var items = [];
        for (var i_1 = 0; i_1 < 10; ++i_1)
            items.push(i_1);
        // PUSH THEM ALL TO THE CONTAINER
        vec.push.apply(vec, __spread(items));
        //----
        // VALIDATION
        //----
        var i = 0;
        try {
            for (var vec_1 = __values(vec), vec_1_1 = vec_1.next(); !vec_1_1.done; vec_1_1 = vec_1.next()) {
                var elem = vec_1_1.value;
                if (elem != items[i++])
                    throw new std.DomainError("Wrong for of iteration.");
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (vec_1_1 && !vec_1_1.done && (_a = vec_1.return)) _a.call(vec_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var e_5, _a;
    }
    function _Test_for_of_map_iteration() {
        //----
        // CONSTRUCTIONS
        //----
        // CONSTRUCT ITEMS TO VALIDATE
        var map = new std.TreeMap();
        var items = [];
        for (var i_2 = 0; i_2 < 10; ++i_2)
            items.push(std.make_pair(i_2, i_2));
        // PUSH THEM ALL TO THE CONTAINER
        map.push.apply(map, __spread(items));
        //----
        // VALIDATION
        //----
        var i = 0;
        try {
            for (var map_3 = __values(map), map_3_1 = map_3.next(); !map_3_1.done; map_3_1 = map_3.next()) {
                var pair = map_3_1.value;
                if (std.equal_to(pair, items[i++]) == false)
                    throw new std.DomainError("Wrong for of iteration.");
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (map_3_1 && !map_3_1.done && (_a = map_3.return)) _a.call(map_3);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_6, _a;
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_hashes() {
    }
    test.test_hashes = test_hashes;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_linear_containers() {
        _Test_linear(new std.Vector());
        _Test_linear(new std.Deque());
        _Test_linear(new std.List());
    }
    test.test_linear_containers = test_linear_containers;
    function _Test_linear(vec) {
        //----
        // CONSTRUCT ELEMENTS
        //----
        for (var i = 0; i < 10; i++)
            vec.push_back(i);
        //----
        // ELEMENTS I/O
        //----
        // ERASE AN ELEMENT
        var it = vec.begin().advance(3); // STEP TO 3
        it = vec.erase(it); // AND ERASE THE 3
        if (it.value != 4)
            throw new std.DomainError("It's wrong");
        // INSERT AN ELEMENT
        it = vec.begin().advance(2);
        it = vec.insert(it, -1); // insert -1
        if (it.value != -1)
            throw new std.DomainError("It's wrong");
        // ERASE RANGE
        it = vec.begin().advance(6);
        it = vec.erase(it, it.advance(3)); // erase from 6 to 9
        if (it.value != 9)
            throw new std.DomainError("It's wrong");
        //----
        // FINAL VALIDATION
        //----
        _Validate_linear_elements(vec, [0, 1, -1, 2, 4, 5, 9]);
    }
    function _Validate_linear_elements(vec, answer) {
        if (vec.size() != answer.length)
            throw new std.DomainError("Number of elements are wrong.");
        var i = 0;
        for (var it = vec.begin(); !it.equals(vec.end()); it = it.next())
            if (it.value != answer[i++])
                throw new std.DomainError("Wrong element is inserted in.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_trees() {
        _Test_tree_order();
        _Test_finds();
        _Test_bounds();
    }
    test.test_trees = test_trees;
    function _Test_tree_order() {
    }
    function _Test_finds() {
    }
    function _Test_bounds() {
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_exception() {
    }
    test.test_exception = test_exception;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function bind() {
        var list = new std.List();
        // <List>???.insert(...)
        // list.insert(list.end(), 5, 1)
        var fn = std.bind(std.List.prototype.insert);
        fn(list, list.end(), 5, 1);
        debug_list();
        var fn2 = std.bind(std.List.prototype.clear);
        fn2(list);
        debug_list();
        // <List>???.insert(_1, _2, 5, _3)
        // list.insert(list.end(), 5, 2)
        var fn3 = std.bind(list.insert, std.placeholders._1, std.placeholders._2, 5, std.placeholders._3);
        fn3(list, list.end(), 2);
        debug_list();
        function debug_list() {
            console.log("#" + list.size());
            for (var it = list.begin(); !it.equals(list.end()); it = it.next())
                console.log(it.value);
            console.log("----------------------------------------------------------");
        }
    }
    test.bind = bind;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_comparisons() {
        var atoms = new std.Vector();
        for (var i = 0; i < 10; ++i)
            for (var j = 0; j < 3; ++j)
                atoms.push(new test.Atomic(i));
        try {
            for (var atoms_1 = __values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {
                var x = atoms_1_1.value;
                try {
                    for (var atoms_2 = __values(atoms), atoms_2_1 = atoms_2.next(); !atoms_2_1.done; atoms_2_1 = atoms_2.next()) {
                        var y = atoms_2_1.value;
                        _Test_comparison_results(x, y, x.value == y.value, std.equal_to);
                        _Test_comparison_results(x, y, x.value != y.value, std.not_equal_to);
                        _Test_comparison_results(x, y, x.value < y.value, std.less);
                        _Test_comparison_results(x, y, x.value > y.value, std.greater);
                        _Test_comparison_results(x, y, x.value <= y.value, std.less_equal);
                        _Test_comparison_results(x, y, x.value >= y.value, std.greater_equal);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (atoms_2_1 && !atoms_2_1.done && (_a = atoms_2.return)) _a.call(atoms_2);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (atoms_1_1 && !atoms_1_1.done && (_b = atoms_1.return)) _b.call(atoms_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var e_8, _b, e_7, _a;
    }
    test.test_comparisons = test_comparisons;
    function _Test_comparison_results(x, y, bit, func) {
        if (bit != func(x, y))
            throw new std.DomainError("Invalid comparison.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_iterators() {
    }
    test.test_iterators = test_iterators;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var Atomic = (function () {
        function Atomic(value) {
            this.value = value;
        }
        Atomic.prototype.equals = function (obj) {
            return std.equal_to(this.value, obj.value);
        };
        Atomic.prototype.less = function (obj) {
            return std.less(this.value, obj.value);
        };
        Atomic.prototype.hashCode = function () {
            return std.hash(this.value);
        };
        return Atomic;
    }());
    test.Atomic = Atomic;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var Cube = (function () {
        function Cube(width, height, length, x, y, z) {
            if (width === void 0) { width = Math.random() * 10; }
            if (height === void 0) { height = Math.random() * 10; }
            if (length === void 0) { length = Math.random() * 10; }
            if (x === void 0) { x = Math.random() * 100; }
            if (y === void 0) { y = Math.random() * 100; }
            if (z === void 0) { z = Math.random() * 100; }
            this.width = width;
            this.height = height;
            this.length = this.length;
            this.x = x;
            this.y = y;
            this.z = z;
        }
        Object.defineProperty(Cube.prototype, "volume", {
            get: function () {
                return this.width * this.height * this.length;
            },
            enumerable: true,
            configurable: true
        });
        return Cube;
    }());
    test.Cube = Cube;
    (function (Cube) {
        function compare_volume(x, y) {
            return x.volume < y.volume;
        }
        Cube.compare_volume = compare_volume;
        function compare_position(left, right) {
            if (left.x != right.x)
                return left.x < right.x;
            else if (left.y != right.y)
                return left.y < right.y;
            else
                return left.z < right.z;
        }
        Cube.compare_position = compare_position;
    })(Cube = test.Cube || (test.Cube = {}));
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_sleeps() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _Test_sleep_for()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, _Test_sleep_until()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    test.test_sleeps = test_sleeps;
    function _Test_sleep_for() {
        return __awaiter(this, void 0, void 0, function () {
            var t1, t2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t1 = new Date();
                        return [4 /*yield*/, std.sleep_for(500)];
                    case 1:
                        _a.sent();
                        t2 = new Date();
                        // VALIDATE THE SLEEP_FOR
                        _Validate_sleep(t1, t2);
                        return [2 /*return*/];
                }
            });
        });
    }
    function _Test_sleep_until() {
        return __awaiter(this, void 0, void 0, function () {
            var t1, t2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t1 = new Date();
                        return [4 /*yield*/, std.sleep_until(new Date(t1.getTime() + 500))];
                    case 1:
                        _a.sent();
                        t2 = new Date();
                        // VAIDATE THE SLEEP_UNTIL
                        _Validate_sleep(t1, t2);
                        return [2 /*return*/];
                }
            });
        });
    }
    function _Validate_sleep(t1, t2) {
        var ms = t2.getTime() - t1.getTime();
        if (ms < 500 - 100 || ms >= 500 + 100)
            throw new std.DomainError("sleep is wrong: " + ms);
    }
})(test || (test = {}));
//# sourceMappingURL=test.js.map